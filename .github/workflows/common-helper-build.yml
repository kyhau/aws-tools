name: Common Helper - Build

on:
  push:
    paths:
      - .github/workflows/common-helper-build.yml
      - _common/**.py
      - _common/pyproject.toml
      - _common/poetry.lock
      - _common/.flake8
      - _common/Makefile

concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}

defaults:
  run:
    shell: bash

jobs:
  security:
    name: Run Snyk to check for vulnerabilities
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v5

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        continue-on-error: true  # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --all-projects --severity-threshold=high --sarif-file-output=snyk.sarif

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif

  build:
    name: Build and test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12, 3.11]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: _common/.venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        working-directory: _common
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        working-directory: _common
        run: poetry install --no-interaction

      - name: Run tests and checks
        working-directory: _common
        run: |
          poetry run pip check
          if [[ "${{ matrix.python-version }}" == "3.12" ]]; then
            # Run with coverage for Python 3.12
            poetry run pytest --cov=. --cov-report=xml:coverage-py312.xml --cov-report=term --cov-fail-under=80 --junit-xml=junit-py312.xml helper/tests
            poetry run flake8 helper
            poetry build
          else
            # Run tests without coverage for other versions
            poetry run pytest --junit-xml=junit-py${{ matrix.python-version }}.xml helper/tests
          fi

      - name: Upload coverage reports to Codecov
        if: matrix.python-version == '3.12'
        uses: codecov/codecov-action@v4
        continue-on-error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: _common/coverage-py312.xml
          fail_ci_if_error: false
          flags: helper
          name: codecov-helper
          verbose: true
