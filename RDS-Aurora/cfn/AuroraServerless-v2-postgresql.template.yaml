AWSTemplateFormatVersion: 2010-09-09
Description: Aurora Serverless v2 PostgreSQL database cluster
Transform: AWS::LanguageExtensions

Parameters:
  AlarmIntegrationEndpoint:
    Description: The HTTPS integration endpoint to send SNS alarm messages.
    Type: String
    Default: ""
  BackupRetentionPeriod:
    Description: The number of days for which automated backups are retained.
    Type: Number
    Default: 4
  DatabaseName:
    Description: The name of your database. If you don't provide a name, then Amazon RDS won't create a database in this DB cluster.
    Type: String
  DBClusterParameterGroup:
    Description: The name of the DB cluster parameter group to associate with this DB cluster.
    Type: String
  DBInstanceParameterGroup:
    Description: The name of the DB instance parameter group to associate with these DB instances.
    Type: String
  EngineVersion:
    Description: The version number of the database engine to use. Optional.
    Type: String
    Default: 14.4
  HostedZoneName:
    Description: The name of the hosted zone that you want to create records in (must include a trailing dot e.g. www.example.com.). Optional.
    Type: String
  MasterUsername:
    Description: The name of the master user for the DB cluster.
    Type: String
    Default: DefaultMasterUser
  MasterPassword:
    Description: The master password for the DB cluster. Auto generated if not specified.
    Type: String
    Default: ""
    NoEcho: true
  MaxCapacity:
    Description: The maximum capacity for an Aurora DB cluster.
    Type: Number
    Default: 4
  MinCapacity:
    Description: The minimum capacity for an Aurora DB cluster.
    Type: Number
    Default: 2
  NetworkSubnetIds:
    Description: Subnet IDs. Add subnets to cover at least 2 AZs.
    Type: List<AWS::EC2::Subnet::Id>
  NetworkVpcId:
    Description: The ID of the VPC for the security group.
    Type: AWS::EC2::VPC::Id
  SnapshotToRestore:
    Description: The identifier for the DB cluster snapshot.
    Type: String
    Default: ""
  Stage:
    Description: Deployment type.
    Type: String
    Default: dev
    AllowedValues: [prd, stg, dev]

Conditions:
  ConfigureAlarms: !Not [!Equals [!Ref AlarmIntegrationEndpoint, ""]]
  ConfigureDBClusterParameterGroup: !Not [!Equals [!Ref DBClusterParameterGroup, ""]]
  ConfigureDBInstanceParameterGroup: !Not [!Equals [!Ref DBInstanceParameterGroup, ""]]
  ConfigureRecordSet: !Not [!Equals [!Ref HostedZoneName, ""]]
  GeneratePassword: !Equals [!Ref MasterPassword, ""]
  IsProduction: !Equals [!Ref Stage, prd]
  RestoreSnapshot: !Not [!Equals [!Ref SnapshotToRestore, ""]]

Resources:
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Ref AWS::StackName
      DBSubnetGroupDescription: Database subnet group
      SubnetIds: !Ref NetworkSubnetIds

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database security group
      GroupName: !Ref AWS::StackName
      VpcId: !Ref NetworkVpcId

  MasterSecret:
    Type: AWS::SecretsManager::Secret
    DeletionPolicy: !If [IsProduction, Retain, Delete]
    UpdateReplacePolicy: !If [IsProduction, Retain, Delete]
    Properties:
      Name: !Ref AWS::StackName
      Description: Database username and password
      SecretString: !If
        - GeneratePassword
        - !Ref AWS::NoValue
        - !Sub '{"username": "${MasterUsername}", "password": "${MasterPassword}"}'
      GenerateSecretString: !If
        - GeneratePassword
        - SecretStringTemplate: !Sub '{"username": "${MasterUsername}"}'
          GenerateStringKey: "password"
          ExcludeCharacters: '\"@/\\'
        - !Ref AWS::NoValue

  KmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: Enable IAM user permissions
            Effect: Allow
            Action: kms:*
            Principal:
              AWS: !Ref AWS::AccountId
            Resource: "*"
          - Sid: Allow use of the key
            Effect: Allow
            Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Principal:
              AWS:
                - !Ref AWS::AccountId
            Resource: "*"
          - Sid: Allow attachment of persistent resources
            Effect: Allow
            Action:
              - kms:CreateGrant
              - kms:ListGrants
              - kms:RevokeGrant*
            Principal:
              AWS:
                - !Ref AWS::AccountId
            Resource: "*"
            Condition:
              Bool:
                kms:GrantIsForAWSResource: true
  KmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}
      TargetKeyId: !Ref KmsKey

  Cluster:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: !If [IsProduction, Retain, Delete]
    UpdateReplacePolicy: !If [IsProduction, Retain, Delete]
    Properties:
      BackupRetentionPeriod: !Ref BackupRetentionPeriod
      DatabaseName: !Ref DatabaseName
      DBClusterParameterGroupName: !If
        - ConfigureDBClusterParameterGroup
        - !Ref DBClusterParameterGroup
        - !Ref AWS::NoValue
      DBSubnetGroupName: !Ref DBSubnetGroup
      DeletionProtection: !If [IsProduction, true, false]
      EnableHttpEndpoint: true
      Engine: aurora-postgresql
      EngineVersion: !Ref EngineVersion
      KmsKeyId: !Ref KmsKey
      MasterUsername: !If
        - RestoreSnapshot
        - !Ref AWS::NoValue
        - !Sub "{{resolve:secretsmanager:${MasterSecret}:SecretString:username}}"
      MasterUserPassword: !If
        - RestoreSnapshot
        - !Ref AWS::NoValue
        - !Sub "{{resolve:secretsmanager:${MasterSecret}:SecretString:password}}"
      ServerlessV2ScalingConfiguration:
        MaxCapacity: !Ref MaxCapacity
        MinCapacity: !Ref MinCapacity
      SnapshotIdentifier:
        !If [RestoreSnapshot, !Ref SnapshotToRestore, !Ref AWS::NoValue]
      StorageEncrypted: true
      VpcSecurityGroupIds:
        - !Ref SecurityGroup

  RDSDBInstance1:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: !If [IsProduction, Snapshot, Delete]
    UpdateReplacePolicy: !If [IsProduction, Snapshot, Delete]
    Properties:
      DBClusterIdentifier: !Ref Cluster
      DBInstanceClass: db.serverless
      DBParameterGroupName: !If
        - ConfigureDBInstanceParameterGroup
        - !Ref DBInstanceParameterGroup
        - !Ref AWS::NoValue
      DBSubnetGroupName: !Ref DBSubnetGroup
      EnablePerformanceInsights: true
      Engine: aurora-postgresql
      EngineVersion: !Ref EngineVersion
      PerformanceInsightsKMSKeyId: !Ref KmsKey
      PerformanceInsightsRetentionPeriod: 7  # Valid values are 7 or 731 (2 years)
      PubliclyAccessible: false

  RDSDBInstance2:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: !If [IsProduction, Snapshot, Delete]
    UpdateReplacePolicy: !If [IsProduction, Snapshot, Delete]
    Properties:
      DBClusterIdentifier: !Ref Cluster
      DBInstanceClass: db.serverless
      DBParameterGroupName: !If
        - ConfigureDBInstanceParameterGroup
        - !Ref DBInstanceParameterGroup
        - !Ref AWS::NoValue
      DBSubnetGroupName: !Ref DBSubnetGroup
      EnablePerformanceInsights: true
      Engine: aurora-postgresql
      EngineVersion: !Ref EngineVersion
      PerformanceInsightsKMSKeyId: !Ref KmsKey
      PerformanceInsightsRetentionPeriod: 7  # Valid values are 7 or 731 (2 years)
      PubliclyAccessible: false

  ################################################################################
  # Route53

  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Condition: ConfigureRecordSet
    Properties:
      Name: !Sub ${AWS::StackName}.${HostedZoneName}
      HostedZoneName: !Ref HostedZoneName
      ResourceRecords:
        - !GetAtt Cluster.Endpoint.Address
      TTL: 30
      Type: CNAME

  ################################################################################
  # CloudWatch

  AlarmTopic:
    Type: AWS::SNS::Topic
    Condition: ConfigureAlarms
    Properties:
      TopicName: !Ref AWS::StackName
      Subscription:
        - Endpoint: !Ref AlarmIntegrationEndpoint
          Protocol: https

  ConnectionAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: ConfigureAlarms
    Properties:
      AlarmDescription: Database connections
      Namespace: AWS/RDS
      MetricName: DatabaseConnections
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 2
      Period: 180
      Statistic: Maximum
      Threshold: 200
      Dimensions:
        - Name: DBClusterIdentifier
          Value: !Ref Cluster
      AlarmActions:
        - !Ref AlarmTopic
      OKActions:
        - !Ref AlarmTopic

  CpuAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: ConfigureAlarms
    Properties:
      AlarmDescription: Database CPU percentage
      Namespace: AWS/RDS
      MetricName: CPUUtilization
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 3
      Period: 300
      Statistic: Average
      Threshold: 60
      Dimensions:
        - Name: DBClusterIdentifier
          Value: !Ref Cluster
      AlarmActions:
        - !Ref AlarmTopic
      OKActions:
        - !Ref AlarmTopic

  LatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: ConfigureAlarms
    Properties:
      AlarmDescription: Database commit latency
      Namespace: AWS/RDS
      MetricName: CommitLatency
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 2
      Period: 180
      Statistic: Maximum
      Threshold: 400  # Milliseconds
      Dimensions:
        - Name: DBClusterIdentifier
          Value: !Ref Cluster
      AlarmActions:
        - !Ref AlarmTopic
      OKActions:
        - !Ref AlarmTopic

  NetworkAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: ConfigureAlarms
    Properties:
      AlarmDescription: Database network throughput
      Namespace: AWS/RDS
      MetricName: NetworkThroughput
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Statistic: Average
      Threshold: 200000000  # 200MB
      Dimensions:
        - Name: DBClusterIdentifier
          Value: !Ref Cluster
      AlarmActions:
        - !Ref AlarmTopic
      OKActions:
        - !Ref AlarmTopic

  Dashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Ref AWS::StackName
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "text",
              "width": 24,
              "height": 1,
              "properties": {
                "markdown": "# Aurora"
              }
            },
            {
              "type": "metric",
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/RDS", "CPUUtilization", "DBClusterIdentifier", "${Cluster}"],
                  [".", "CPUCreditUsage", "..."],
                  [".", "CPUCreditBalance", "..."]
                ],
                "period": 60,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "CPU"
              }
            }, {
              "type": "metric",
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/RDS", "DatabaseConnections", "DBClusterIdentifier", "${Cluster}", {
                    "stat": "Average"
                  }],
                  ["...", {
                    "stat": "Maximum"
                  }],
                  ["...", {
                    "stat": "Minimum"
                  }]
                ],
                "period": 60,
                "region": "${AWS::Region}",
                "title": "Connection"
              }
            },
            {
              "type": "metric",
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/RDS", "UpdateLatency", "DBClusterIdentifier", "${Cluster}"],
                  [".", "SelectLatency", "..."],
                  [".", "DeleteLatency", "..."],
                  [".", "CommitLatency", "..."],
                  [".", "InsertLatency", "..."]
                ],
                "period": 60,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Latency"
              }
            },
            {
              "type": "metric",
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/RDS", "NetworkThroughput", "DBClusterIdentifier", "${Cluster}", {
                    "stat": "Average"
                  }],
                  ["...", {
                    "stat": "Maximum"
                  }],
                  ["...", {
                    "stat": "Minimum"
                  }],
                  [".", "NetworkReceiveThroughput", "...", {
                    "stat": "Average"
                  }],
                  ["...", {
                    "stat": "Maximum"
                  }],
                  ["...", {
                    "stat": "Minimum"
                  }],
                  [".", "NetworkTransmitThroughput", "...", {
                    "stat": "Average"
                  }],
                  ["...", {
                    "stat": "Maximum"
                  }],
                  ["...", {
                    "stat": "Minimum"
                  }]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Network Throughput"

              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/RDS", "Queries", "DBClusterIdentifier", "${Cluster}"]
                ],
                "period": 60,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Queries"

              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/RDS", "CommitThroughput", "DBClusterIdentifier", "${Cluster}"],
                  [".", "InsertThroughput", "..."],
                  [".", "DeleteThroughput", "..."],
                  [".", "SelectThroughput", "..."],
                  [".", "UpdateThroughput", "..."]
                ],
                "period": 60,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Throughput"

              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/RDS", "ServerlessDatabaseCapacity", "DBClusterIdentifier", "${Cluster}"]
                ],
                "period": 60,
                "stat": "Maximum",
                "region": "${AWS::Region}",
                "title": "Capacity"

              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/RDS", "EngineUptime", "DBClusterIdentifier", "${Cluster}"]
                ],
                "period": 60,
                "stat": "Maximum",
                "region": "${AWS::Region}",
                "title": "Uptime"
              }
            }
          ]
        }

Outputs:
  MasterUsername:
    Description: The name of the master user for the DB cluster.
    Value: !Ref MasterUsername
    Export:
      Name: !Sub ${AWS::StackName}-MasterUsername
  MasterSecretArn:
    Description: The secret ARN for the DB master username and password.
    Value: !Ref MasterSecret
    Export:
      Name: !Sub ${AWS::StackName}-MasterSecretArn
  SecurityGroupId:
    Description: The security group ID for the DB cluster.
    Value: !Ref SecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-SG-ID
  EndpointAddress:
    Description: The connection endpoint for the DB cluster.
    Value: !GetAtt Cluster.Endpoint.Address
    Export:
      Name: !Sub ${AWS::StackName}-EndpointAddress
  CustomEndpointAddress:
    Condition: ConfigureRecordSet
    Description: The custom connection endpoint for the DB cluster.
    Value: !Ref Route53RecordSet
    Export:
      Name: !Sub ${AWS::StackName}-CustomEndpointAddress
