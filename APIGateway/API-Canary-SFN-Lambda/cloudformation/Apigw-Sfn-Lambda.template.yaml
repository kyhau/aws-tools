# Stack name: K-Cancary-Demo-API
AWSTemplateFormatVersion: '2010-09-09'
Description: Create a API gateway placeholder and the Step Function and Lambda function with dummy content.

Parameters:
  ApiName:
    Description: Name of the API Gateway to create
    Type: String
    Default: K-Cancary-Demo-API
  ApiStageName:
    Description: Name of the API stage to create
    Type: String
    Default: v0
    AllowedPattern: '[A-Za-z0-9]*'
    MinLength: '1'
    MaxLength: '64'
    ConstraintDescription: must contain only alphanumeric characters (1-64 chars)
  SfnFunctionName:
    Description: Name of the Lambda function to be invoked from SFN.
    Type: String
    Default: K-SFN-Function-A
  ApigwFunctionName:
    Description: Name of the Lambda function to be invoked from APIGW.
    Type: String
    Default: K-SFN-Function-B
  FunctionTracingConfigMode:
    Description: TracingConfig Mode
    Type: String
    AllowedValues: ["Active", "PassThrough"]
    Default: PassThrough
  LogRetention:
    Description: Days to keep application logs
    Type: Number
    Default: 1
  StateMachineName:
    Description: Name of the State Machine to create.
    Type: String
    Default: K-SFN-StateMachine
  StateMachineTracing:
    Description: Enable State Machine tracing
    Type: String
    AllowedValues: ["true", "false"]
    Default: "false"

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub ${ApiName}-Lambda-ExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:DescribeExecution
                Resource: arn:aws:states:ap-southeast-2:818427450946:execution:K-SFN-StateMachine*
      RoleName: !Sub ${ApiName}-Lambda-ExecutionRole

  SfnFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              # This function will be updated through CI/CD
              return "Lambda version 1"
      FunctionName: !Ref SfnFunctionName
      Handler: index.lambda_handler
      MemorySize: 1024
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 900
      TracingConfig:
        Mode: !Ref FunctionTracingConfigMode

  SfnFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${SfnFunction}
      RetentionInDays: !Ref LogRetention

  SfnFunctionVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref SfnFunction

  SfnFunctionAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref SfnFunction
      FunctionVersion: !Ref SfnFunctionVersion
      Name: blue

  ApigwFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import logging
          import os
          import time
          import boto3

          SFN_ARN = os.environ["sfnArn"]
          EXE_ARN = SFN_ARN.replace(":stateMachine:", ":execution:")

          sfn_client = boto3.client("stepfunctions")


          def lambda_response(message, status_code=200):
              logging.info(message)
              return {
                  "body": json.dumps(message),
                  "headers": {"Content-Type": "application/json"},
                  "statusCode": status_code,
              }


          def lambda_handler(event, context):
              logging.info(event)
              logging.info(SFN_ARN)

              params = event["queryStringParameters"]
              eid = params.get("eid")

              if eid:
                  resp = sfn_client.describe_execution(executionArn=f"{EXE_ARN}:{eid}")
                  while resp["status"] == "RUNNING":
                      print(resp.get("output"))
                      time.sleep(1)
                      resp = sfn_client.describe_execution(executionArn=f"{EXE_ARN}:{eid}")

                  print(resp.get("output"))
                  return lambda_response(resp.get("output"))

              return lambda_response({"message": f"Returned from lambda B {eid}"})

      Environment:
        Variables:
          sfnArn: !Ref StateMachineBlue
      FunctionName: !Ref ApigwFunctionName
      Handler: index.lambda_handler
      MemorySize: 1024
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 900
      TracingConfig:
        Mode: !Ref FunctionTracingConfigMode

  ApigwFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ApigwFunction}
      RetentionInDays: !Ref LogRetention

  ApigwFunctionVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref ApigwFunction

  ApigwFunctionAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref ApigwFunction
      FunctionVersion: !Ref ApigwFunctionVersion
      Name: blue

  StateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub ${StateMachineName}-ExecutionRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:ListFunctions
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${SfnFunctionName}*"
              - Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                Resource: "*"
              - Effect: Allow
                Action:
                  - xray:Put*
                Resource: "*"
      RoleName: !Sub ${StateMachineName}-ExecuteRole

  StateMachineLogGroupBlue:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vendedlogs/states/${StateMachineName}-Blue-Logs
      RetentionInDays: !Ref LogRetention

  StateMachineBlue:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "A Hello World example using an AWS Lambda function",
              "StartAt": "HelloWorld",
              "States": {
                "HelloWorld": {
                  "Type": "Task",
                  "Resource": "${lambdaArn}:blue",
                  "End": true
                }
              }
            }
          - {lambdaArn: !GetAtt SfnFunction.Arn}
      LoggingConfiguration:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StateMachineLogGroupBlue.Arn
        IncludeExecutionData: true
        Level: ERROR
      RoleArn: !GetAtt StateMachineExecutionRole.Arn
      StateMachineName: !Sub ${StateMachineName}-Blue
      StateMachineType: STANDARD
      TracingConfiguration:
        Enabled: !Ref StateMachineTracing

  StateMachineLogGroupGreen:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vendedlogs/states/${StateMachineName}-Green-Logs
      RetentionInDays: !Ref LogRetention

  StateMachineGreen:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "A Hello World example using an AWS Lambda function",
              "StartAt": "HelloWorld",
              "States": {
                "HelloWorld": {
                  "Type": "Task",
                  "Resource": "${lambdaArn}:green",
                  "End": true
                }
              }
            }
          - {lambdaArn: !GetAtt SfnFunction.Arn}
      LoggingConfiguration:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StateMachineLogGroupGreen.Arn
        IncludeExecutionData: true
        Level: ERROR
      RoleArn: !GetAtt StateMachineExecutionRole.Arn
      StateMachineName: !Sub ${StateMachineName}-Green
      StateMachineType: STANDARD
      TracingConfiguration:
        Enabled: !Ref StateMachineTracing

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref ApiName
      Description: !Ref ApiName
      FailOnWarnings: true

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: execution
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt ApigExecutionRole.Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseTemplates:
              application/json: |
                {
                  "token": "$input.json('$.executionArn').split(':')[7].replace('"', "")"
                }
            StatusCode: "200"
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json:
            !Sub |
              {
                "input": "$util.escapeJavaScript($input.json('$'))",
                "stateMachineArn": "${stageVariables.sfnArn}"
              }
        TimeoutInMillis: 29000
        Type: AWS
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:states:action/StartExecution"
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          StatusCode: "200"
      OperationName: StartExecution
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        ConnectionType: INTERNET
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ContentHandling: CONVERT_TO_TEXT
            StatusCode: "200"
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref AWS::Region
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt ApigwFunction.Arn
            - ':${stageVariables.lambdaAlias}/invocations'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          StatusCode: "200"
      OperationName: GetExecution
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi

  ApigwLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub API-Gateway-Execution-Logs_${ApiGatewayRestApi}/${ApiStageName}
      RetentionInDays: !Ref LogRetention

  ApigExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ApiName}-SFN-ExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${ApiName}-SFN-ExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  - !Ref StateMachineBlue
                  - !Sub "${StateMachineBlue}:*"
                  - !Ref StateMachineGreen
                  - !Sub "${StateMachineGreen}:*"

  ApiGatewayInvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ApigwFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/GET/execution"

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayGetMethod
      - ApiGatewayPostMethod
    Properties:
      Description: Mock API Deployment
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: !Sub Mock API Stage ${ApiStageName}
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          LoggingLevel: INFO
      RestApiId: !Ref ApiGatewayRestApi
      StageName: !Ref ApiStageName
      Variables:
        lambdaAlias: blue
        sfnArn: !Ref StateMachineBlue

Outputs:
  ApigwUrl:
    Description: API URL
    Value: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiStageName}/execution
