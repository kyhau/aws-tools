AWSTemplateFormatVersion: '2010-09-09'
Description: 'Create new Private Subnet for  '
Parameters:
  NewSubnetName:
    Description: 'tag to be used for tagging related sources (e.g. 10-99-32-my-subnet).'
    Type: String
  VpcId:
    Description: Provide Valid VPC ID in this region (e.g. vpc-h8s7776d1).
    Type: AWS::EC2::VPC::Id
  SubnetZone:
    Description: The Availability Zone of the default subnet.
    Type: String
    Default: ap-southeast-2
  PrivateSubnetCidr:
    Description: Enter A valid Private UNUSED/NONOVERLAPPING CIDR range (e.g. 10.99.32.0/25)
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: (\d{1,3})\.(\d{1,3}).(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be in the form x.x.x.x/x
  VpnSubnetCidr:
    Description: IP Address range of the Subnet in which OpenVPN instance is Launched
      (e.g. 10.99.0.0/20).
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  NatGatewayId:
    Description: Provide the NAT Gateway ID (e.g nat-00f0130f899a719cf)
    Type: String
Resources:
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VpcId'
      CidrBlock: !Ref 'PrivateSubnetCidr'
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Ref 'SubnetZone'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Name
          Value: !Ref 'NewSubnetName'
  PrivateSubnetNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'VpcId'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Name
          Value: !Ref 'NewSubnetName'
  PrivateSubnetNetworkAclEgress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: true
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
      NetworkAclId: !Ref 'PrivateSubnetNetworkAcl'
  PrivateSubnetNetworkAclIngress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: '0.0.0.0/0'
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
      NetworkAclId: !Ref 'PrivateSubnetNetworkAcl'
  PrivateSubnetAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref 'PrivateSubnetNetworkAcl'
      SubnetId: !Ref 'PrivateSubnet'
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VpcId'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Name
          Value: !Ref 'NewSubnetName'
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable'
      SubnetId: !Ref 'PrivateSubnet'
  PrivateRouteNatGW1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      RouteTableId: !Ref 'PrivateRouteTable'
      NatGatewayId: !Ref 'NatGatewayId'
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VpcId'
      GroupDescription: !Ref 'NewSubnetName'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: !Ref 'VpnSubnetCidr'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Name
          Value: !Ref 'NewSubnetName'
  SgIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EC2SecurityGroup'
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref 'EC2SecurityGroup'
      SourceSecurityGroupOwnerId: !Ref 'AWS::AccountId'
